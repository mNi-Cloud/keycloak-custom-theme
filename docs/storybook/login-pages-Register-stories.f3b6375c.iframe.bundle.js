"use strict";(self.webpackChunkkeycloakify_starter=self.webpackChunkkeycloakify_starter||[]).push([[3329],{"./src/login/pages/Register.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithEmailAlreadyExists:()=>WithEmailAlreadyExists,WithEmailAsUsername:()=>WithEmailAsUsername,WithFavoritePet:()=>WithFavoritePet,WithPasswordMinLength8:()=>WithPasswordMinLength8,WithRecaptcha:()=>WithRecaptcha,WithRecaptchaFrench:()=>WithRecaptchaFrench,WithRestrictedToMITStudents:()=>WithRestrictedToMITStudents,WithTermsAcceptance:()=>WithTermsAcceptance,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _KcPageStory__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/login/KcPageStory.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const{KcPageStory}=(0,_KcPageStory__WEBPACK_IMPORTED_MODULE_0__.N)({pageId:"register.ftl"}),__WEBPACK_DEFAULT_EXPORT__={title:"login/register.ftl",component:KcPageStory},Default={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{})},WithEmailAlreadyExists={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{kcContext:{profile:{attributesByName:{username:{value:"johndoe"},email:{value:"jhon.doe@gmail.com"},firstName:{value:"John"},lastName:{value:"Doe"}}},messagesPerField:{existsError:function(fieldName){for(var _len=arguments.length,otherFieldNames=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)otherFieldNames[_key-1]=arguments[_key];return[fieldName,...otherFieldNames].includes("email")},get:fieldName=>"email"===fieldName?"Email already exists.":void 0}}})},WithRestrictedToMITStudents={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{kcContext:{profile:{attributesByName:{email:{validators:{pattern:{pattern:"^[^@]+@([^.]+\\.)*((mit\\.edu)|(berkeley\\.edu))$","error-message":"${profile.attributes.email.pattern.error}"}},annotations:{inputHelperTextBefore:"${profile.attributes.email.inputHelperTextBefore}"}}}},"x-keycloakify":{messages:{"profile.attributes.email.inputHelperTextBefore":"Please use your MIT or Berkeley email.","profile.attributes.email.pattern.error":"This is not an MIT (<strong>@mit.edu</strong>) nor a Berkeley (<strong>@berkeley.edu</strong>) email."}}}})},WithFavoritePet={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{kcContext:{profile:{attributesByName:{favoritePet:{name:"favorite-pet",displayName:"${profile.attributes.favoritePet}",validators:{options:{options:["cat","dog","fish"]}},annotations:{inputOptionLabelsI18nPrefix:"profile.attributes.favoritePet.options"},required:!1,readOnly:!1}}},"x-keycloakify":{messages:{"profile.attributes.favoritePet":"Favorite Pet","profile.attributes.favoritePet.options.cat":"Fluffy Cat","profile.attributes.favoritePet.options.dog":"Loyal Dog","profile.attributes.favoritePet.options.fish":"Peaceful Fish"}}}})},WithEmailAsUsername={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{kcContext:{realm:{registrationEmailAsUsername:!0},profile:{attributesByName:{username:void 0}}}})},WithRecaptcha={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{kcContext:{scripts:["https://www.google.com/recaptcha/api.js?hl=en"],recaptchaRequired:!0,recaptchaSiteKey:"6LfQHvApAAAAAE73SYTd5vS0lB1Xr7zdiQ-6iBVa"}})},WithRecaptchaFrench={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{kcContext:{locale:{currentLanguageTag:"fr"},scripts:["https://www.google.com/recaptcha/api.js?hl=fr"],recaptchaRequired:!0,recaptchaSiteKey:"6LfQHvApAAAAAE73SYTd5vS0lB1Xr7zdiQ-6iBVa"}})},WithPasswordMinLength8={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{kcContext:{passwordPolicies:{length:8}}})},WithTermsAcceptance={render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(KcPageStory,{kcContext:{termsAcceptanceRequired:!0,"x-keycloakify":{messages:{termsText:"<a href='https://example.com/terms'>Service Terms of Use</a>"}}}})},__namedExportsOrder=["Default","WithEmailAlreadyExists","WithRestrictedToMITStudents","WithFavoritePet","WithEmailAsUsername","WithRecaptcha","WithRecaptchaFrench","WithPasswordMinLength8","WithTermsAcceptance"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: () => <KcPageStory />\n}",...Default.parameters?.docs?.source}}},WithEmailAlreadyExists.parameters={...WithEmailAlreadyExists.parameters,docs:{...WithEmailAlreadyExists.parameters?.docs,source:{originalSource:'{\n  render: () => <KcPageStory kcContext={{\n    profile: {\n      attributesByName: {\n        username: {\n          value: "johndoe"\n        },\n        email: {\n          value: "jhon.doe@gmail.com"\n        },\n        firstName: {\n          value: "John"\n        },\n        lastName: {\n          value: "Doe"\n        }\n      }\n    },\n    messagesPerField: {\n      // NOTE: The other functions of messagesPerField are derived from get() and\n      // existsError() so they are the only ones that need to mock.\n      existsError: (fieldName: string, ...otherFieldNames: string[]) => [fieldName, ...otherFieldNames].includes("email"),\n      get: (fieldName: string) => fieldName === "email" ? "Email already exists." : undefined\n    }\n  }} />\n}',...WithEmailAlreadyExists.parameters?.docs?.source}}},WithRestrictedToMITStudents.parameters={...WithRestrictedToMITStudents.parameters,docs:{...WithRestrictedToMITStudents.parameters?.docs,source:{originalSource:'{\n  render: () => <KcPageStory kcContext={{\n    profile: {\n      attributesByName: {\n        email: {\n          validators: {\n            pattern: {\n              pattern: "^[^@]+@([^.]+\\\\.)*((mit\\\\.edu)|(berkeley\\\\.edu))$",\n              "error-message": "${profile.attributes.email.pattern.error}"\n            }\n          },\n          annotations: {\n            inputHelperTextBefore: "${profile.attributes.email.inputHelperTextBefore}"\n          }\n        }\n      }\n    },\n    "x-keycloakify": {\n      messages: {\n        "profile.attributes.email.inputHelperTextBefore": "Please use your MIT or Berkeley email.",\n        "profile.attributes.email.pattern.error": "This is not an MIT (<strong>@mit.edu</strong>) nor a Berkeley (<strong>@berkeley.edu</strong>) email."\n      }\n    }\n  }} />\n}',...WithRestrictedToMITStudents.parameters?.docs?.source}}},WithFavoritePet.parameters={...WithFavoritePet.parameters,docs:{...WithFavoritePet.parameters?.docs,source:{originalSource:'{\n  render: () => <KcPageStory kcContext={{\n    profile: {\n      attributesByName: {\n        favoritePet: ({\n          name: "favorite-pet",\n          displayName: "${profile.attributes.favoritePet}",\n          validators: {\n            options: {\n              options: ["cat", "dog", "fish"]\n            }\n          },\n          annotations: {\n            inputOptionLabelsI18nPrefix: "profile.attributes.favoritePet.options"\n          },\n          required: false,\n          readOnly: false\n        } satisfies Attribute)\n      }\n    },\n    "x-keycloakify": {\n      messages: {\n        "profile.attributes.favoritePet": "Favorite Pet",\n        "profile.attributes.favoritePet.options.cat": "Fluffy Cat",\n        "profile.attributes.favoritePet.options.dog": "Loyal Dog",\n        "profile.attributes.favoritePet.options.fish": "Peaceful Fish"\n      }\n    }\n  }} />\n}',...WithFavoritePet.parameters?.docs?.source}}},WithEmailAsUsername.parameters={...WithEmailAsUsername.parameters,docs:{...WithEmailAsUsername.parameters?.docs,source:{originalSource:"{\n  render: () => <KcPageStory kcContext={{\n    realm: {\n      registrationEmailAsUsername: true\n    },\n    profile: {\n      attributesByName: {\n        username: undefined\n      }\n    }\n  }} />\n}",...WithEmailAsUsername.parameters?.docs?.source}}},WithRecaptcha.parameters={...WithRecaptcha.parameters,docs:{...WithRecaptcha.parameters?.docs,source:{originalSource:'{\n  render: () => <KcPageStory kcContext={{\n    scripts: ["https://www.google.com/recaptcha/api.js?hl=en"],\n    recaptchaRequired: true,\n    recaptchaSiteKey: "6LfQHvApAAAAAE73SYTd5vS0lB1Xr7zdiQ-6iBVa"\n  }} />\n}',...WithRecaptcha.parameters?.docs?.source}}},WithRecaptchaFrench.parameters={...WithRecaptchaFrench.parameters,docs:{...WithRecaptchaFrench.parameters?.docs,source:{originalSource:'{\n  render: () => <KcPageStory kcContext={{\n    locale: {\n      currentLanguageTag: "fr"\n    },\n    scripts: ["https://www.google.com/recaptcha/api.js?hl=fr"],\n    recaptchaRequired: true,\n    recaptchaSiteKey: "6LfQHvApAAAAAE73SYTd5vS0lB1Xr7zdiQ-6iBVa"\n  }} />\n}',...WithRecaptchaFrench.parameters?.docs?.source}}},WithPasswordMinLength8.parameters={...WithPasswordMinLength8.parameters,docs:{...WithPasswordMinLength8.parameters?.docs,source:{originalSource:"{\n  render: () => <KcPageStory kcContext={{\n    passwordPolicies: {\n      length: 8\n    }\n  }} />\n}",...WithPasswordMinLength8.parameters?.docs?.source}}},WithTermsAcceptance.parameters={...WithTermsAcceptance.parameters,docs:{...WithTermsAcceptance.parameters?.docs,source:{originalSource:'{\n  render: () => <KcPageStory kcContext={{\n    termsAcceptanceRequired: true,\n    "x-keycloakify": {\n      messages: {\n        termsText: "<a href=\'https://example.com/terms\'>Service Terms of Use</a>"\n      }\n    }\n  }} />\n}',...WithTermsAcceptance.parameters?.docs?.source}}}}}]);