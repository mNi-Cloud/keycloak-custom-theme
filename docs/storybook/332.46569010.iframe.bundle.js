"use strict";(self.webpackChunkkeycloakify_starter=self.webpackChunkkeycloakify_starter||[]).push([[332],{"./node_modules/keycloakify/login/lib/useUserProfileForm.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{v:()=>getButtonToDisplayForMultivaluedAttributeField,u:()=>useUserProfileForm});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=(__webpack_require__("./node_modules/keycloakify/tools/Array.prototype.every.js"),__webpack_require__("./node_modules/react/index.js")),assert=__webpack_require__("./node_modules/tsafe/assert.js"),id=__webpack_require__("./node_modules/tsafe/id.js"),structuredCloneButFunctions=__webpack_require__("./node_modules/keycloakify/tools/structuredCloneButFunctions.js");const emailRegexp=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,formatNumber=(input,format)=>{if(!input)return"";const digitPattern=format.match(/{\d+}/g);if(!digitPattern)return"";const maxSize=digitPattern.reduce(((total,p)=>total+parseInt(p.replace("{","").replace("}",""))),0);let rawValue=input.replace(/\D+/g,"");if(parseInt(rawValue)!=rawValue)return"";rawValue.length>maxSize&&(rawValue=rawValue.substring(0,maxSize));const formatter=digitPattern.reduce(((result,p)=>result+`(\\d${p})`),"^");let digits=new RegExp(formatter).exec(rawValue);if(!digits)return input;let result=format;for(let i=0;i<digitPattern.length;i++)result=result.replace(digitPattern[i],digits[i+1]);return result};var useInsertScriptTags=__webpack_require__("./node_modules/keycloakify/tools/useInsertScriptTags.js"),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};function useUserProfileForm(params){var _a,_b;const{kcContext,i18n,doMakeUserConfirmPassword}=params,{insertScriptTags}=(0,useInsertScriptTags.p)({componentOrHookName:"useUserProfileForm",scriptTags:Object.keys(null!==(_b=null===(_a=kcContext.profile)||void 0===_a?void 0:_a.html5DataAnnotations)&&void 0!==_b?_b:{}).filter((key=>"kcMultivalued"!==key&&"kcNumberFormat"!==key)).map((key=>({type:"module",src:`${kcContext.url.resourcesPath}/js/${key}.js`})))});(0,react.useEffect)((()=>{insertScriptTags()}),[]);const{getErrors}=function useGetErrors(params){const{kcContext,i18n}=params,{messagesPerField,passwordPolicies}=kcContext,{msg,msgStr,advancedMsg,advancedMsgStr}=i18n,getErrors=function useConstCallback(callback){const callbackRef=(0,react.useRef)(null);return callbackRef.current=callback,(0,react.useState)((()=>(...args)=>callbackRef.current(...args)))[0]}((params=>{var _a,_b;const{attributeName,formFieldStates}=params,formFieldState=formFieldStates.find((({attribute})=>attribute.name===attributeName));(0,assert.assert)(void 0!==formFieldState);const{attribute}=formFieldState,valueOrValues=(()=>{var _a;let{valueOrValues}=formFieldState;{const{kcNumberUnFormat}=null!==(_a=attribute.html5DataAnnotations)&&void 0!==_a?_a:{};kcNumberUnFormat&&(valueOrValues=valueOrValues instanceof Array?valueOrValues.map((value=>formatNumber(value,kcNumberUnFormat))):formatNumber(valueOrValues,kcNumberUnFormat))}return valueOrValues})();(0,assert.assert)(void 0!==attribute);server_side_error:{if(attribute.multivalued){const defaultValues=(null===(_a=attribute.values)||void 0===_a?void 0:_a.length)?attribute.values:[""];(0,assert.assert)(valueOrValues instanceof Array);const values=valueOrValues;if(JSON.stringify(defaultValues)!==JSON.stringify(values.slice(0,defaultValues.length)))break server_side_error}else{const defaultValue=null!==(_b=attribute.value)&&void 0!==_b?_b:"";(0,assert.assert)("string"==typeof valueOrValues);if(defaultValue!==valueOrValues)break server_side_error}let doesErrorExist;try{doesErrorExist=messagesPerField.existsError(attributeName)}catch(_c){break server_side_error}if(!doesErrorExist)break server_side_error;const errorMessageStr=messagesPerField.get(attributeName);return[{errorMessageStr,errorMessage:(0,jsx_runtime.jsx)("span",{dangerouslySetInnerHTML:{__html:errorMessageStr}},0),fieldIndex:void 0,source:{type:"server"}}]}handle_multi_valued_multi_fields:{if(!attribute.multivalued)break handle_multi_valued_multi_fields;if(getIsMultivaluedSingleField({attribute}))break handle_multi_valued_multi_fields;(0,assert.assert)(valueOrValues instanceof Array);const values=valueOrValues,errors=values.map(((...[,index])=>{const specificValueErrors=getErrors({attributeName,formFieldStates:formFieldStates.map((formFieldState=>formFieldState.attribute.name===attributeName?((0,assert.assert)(formFieldState.valueOrValues instanceof Array),{attribute:Object.assign(Object.assign({},attribute),{annotations:Object.assign(Object.assign({},attribute.annotations),{inputType:void 0}),multivalued:!1}),valueOrValues:formFieldState.valueOrValues[index]}):formFieldState))});return specificValueErrors.filter((error=>"other"!==error.source.type||"requiredField"!==error.source.rule)).map((error=>Object.assign(Object.assign({},error),{fieldIndex:index})))})).reduce(((acc,errors)=>[...acc,...errors]),[]);required_field:{if(!attribute.required)break required_field;if(values.every((value=>""!==value)))break required_field;const msgArgs=["error-user-attribute-required"];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"other",rule:"requiredField"}})}return errors}handle_multi_valued_single_field:{if(!attribute.multivalued)break handle_multi_valued_single_field;if(!getIsMultivaluedSingleField({attribute}))break handle_multi_valued_single_field;const validatorName="multivalued",validator=attribute.validators[validatorName];if(void 0===validator)return[];const{min:minStr}=validator,min=minStr?parseInt(`${minStr}`):attribute.required?1:0;(0,assert.assert)(!isNaN(min));const{max:maxStr}=validator,max=maxStr?parseInt(`${maxStr}`):1/0;(0,assert.assert)(!isNaN(max)),(0,assert.assert)(valueOrValues instanceof Array);const values=valueOrValues;if(min<=values.length&&values.length<=max)return[];const msgArgs=["error-invalid-multivalued-size",`${min}`,`${max}`];return[{errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},0),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"validator",name:validatorName}}]}(0,assert.assert)("string"==typeof valueOrValues);const value=valueOrValues,errors=[];if("password"===attributeName&&void 0!==passwordPolicies){check_password_policy_x:{const policyName="length",policy=passwordPolicies[policyName];if(!policy)break check_password_policy_x;const minLength=policy;if(value.length>=minLength)break check_password_policy_x;const msgArgs=["invalidPasswordMinLengthMessage",`${minLength}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"passwordPolicy",name:policyName}})}check_password_policy_x:{const policyName="digits",policy=passwordPolicies[policyName];if(!policy)break check_password_policy_x;const minNumberOfDigits=policy;if(value.split("").filter((char=>!isNaN(parseInt(char)))).length>=minNumberOfDigits)break check_password_policy_x;const msgArgs=["invalidPasswordMinDigitsMessage",`${minNumberOfDigits}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"passwordPolicy",name:policyName}})}check_password_policy_x:{const policyName="lowerCase",policy=passwordPolicies[policyName];if(!policy)break check_password_policy_x;const minNumberOfLowerCaseChar=policy;if(value.split("").filter((char=>char===char.toLowerCase()&&char!==char.toUpperCase())).length>=minNumberOfLowerCaseChar)break check_password_policy_x;const msgArgs=["invalidPasswordMinLowerCaseCharsMessage",`${minNumberOfLowerCaseChar}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"passwordPolicy",name:policyName}})}check_password_policy_x:{const policyName="upperCase",policy=passwordPolicies[policyName];if(!policy)break check_password_policy_x;const minNumberOfUpperCaseChar=policy;if(value.split("").filter((char=>char===char.toUpperCase()&&char!==char.toLowerCase())).length>=minNumberOfUpperCaseChar)break check_password_policy_x;const msgArgs=["invalidPasswordMinUpperCaseCharsMessage",`${minNumberOfUpperCaseChar}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"passwordPolicy",name:policyName}})}check_password_policy_x:{const policyName="specialChars",policy=passwordPolicies[policyName];if(!policy)break check_password_policy_x;const minNumberOfSpecialChar=policy;if(value.split("").filter((char=>!char.match(/[a-zA-Z0-9]/))).length>=minNumberOfSpecialChar)break check_password_policy_x;const msgArgs=["invalidPasswordMinSpecialCharsMessage",`${minNumberOfSpecialChar}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"passwordPolicy",name:policyName}})}check_password_policy_x:{const policyName="notUsername";if(!passwordPolicies[policyName])break check_password_policy_x;const usernameFormFieldState=formFieldStates.find((formFieldState=>"username"===formFieldState.attribute.name));if(!usernameFormFieldState)break check_password_policy_x;const usernameValue=(()=>{var _a;let{valueOrValues}=usernameFormFieldState;(0,assert.assert)("string"==typeof valueOrValues);{const{kcNumberUnFormat}=null!==(_a=attribute.html5DataAnnotations)&&void 0!==_a?_a:{};kcNumberUnFormat&&(valueOrValues=formatNumber(valueOrValues,kcNumberUnFormat))}return valueOrValues})();if(""===usernameValue)break check_password_policy_x;if(value!==usernameValue)break check_password_policy_x;const msgArgs=["invalidPasswordNotUsernameMessage"];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"passwordPolicy",name:policyName}})}check_password_policy_x:{const policyName="notEmail";if(!passwordPolicies[policyName])break check_password_policy_x;const emailFormFieldState=formFieldStates.find((formFieldState=>"email"===formFieldState.attribute.name));if(!emailFormFieldState)break check_password_policy_x;(0,assert.assert)("string"==typeof emailFormFieldState.valueOrValues);{const emailValue=emailFormFieldState.valueOrValues;if(""===emailValue)break check_password_policy_x;if(value!==emailValue)break check_password_policy_x}const msgArgs=["invalidPasswordNotEmailMessage"];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"passwordPolicy",name:policyName}})}}password_confirm_matches_password:{if("password-confirm"!==attributeName)break password_confirm_matches_password;const passwordFormFieldState=formFieldStates.find((formFieldState=>"password"===formFieldState.attribute.name));(0,assert.assert)(void 0!==passwordFormFieldState),(0,assert.assert)("string"==typeof passwordFormFieldState.valueOrValues);if(value===passwordFormFieldState.valueOrValues)break password_confirm_matches_password;const msgArgs=["invalidPasswordConfirmMessage"];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"other",rule:"passwordConfirmMatchesPassword"}})}const{validators}=attribute;required_field:{if(!attribute.required)break required_field;if(""!==value)break required_field;const msgArgs=["error-user-attribute-required"];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"other",rule:"requiredField"}})}validator_x:{const validatorName="length",validator=validators[validatorName];if(!validator)break validator_x;const{"ignore.empty.value":ignoreEmptyValue=!1,max,min}=validator;if(ignoreEmptyValue&&""===value)break validator_x;const source={type:"validator",name:validatorName};if(max&&value.length>parseInt(`${max}`)){const msgArgs=["error-invalid-length-too-long",`${max}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source})}if(min&&value.length<parseInt(`${min}`)){const msgArgs=["error-invalid-length-too-short",`${min}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source})}}validator_x:{const validatorName="pattern",validator=validators[validatorName];if(void 0===validator)break validator_x;const{"ignore.empty.value":ignoreEmptyValue=!1,pattern,"error-message":errorMessageKey}=validator;if(ignoreEmptyValue&&""===value)break validator_x;if(new RegExp(pattern).test(value))break validator_x;const msgArgs=[null!=errorMessageKey?errorMessageKey:(0,id.id)("shouldMatchPattern"),pattern];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:advancedMsg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:advancedMsgStr(...msgArgs),fieldIndex:void 0,source:{type:"validator",name:validatorName}})}validator_x:{{const lastError=errors[errors.length-1];if(void 0!==lastError&&"validator"===lastError.source.type&&"pattern"===lastError.source.name)break validator_x}const validatorName="email",validator=validators[validatorName];if(void 0===validator)break validator_x;const{"ignore.empty.value":ignoreEmptyValue=!1}=validator;if(ignoreEmptyValue&&""===value)break validator_x;if(emailRegexp.test(value))break validator_x;const msgArgs=[(0,id.id)("invalidEmailMessage")];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"validator",name:validatorName}})}validator_x:{const validatorName="integer",validator=validators[validatorName];if(void 0===validator)break validator_x;const{"ignore.empty.value":ignoreEmptyValue=!1,max,min}=validator;if(ignoreEmptyValue&&""===value)break validator_x;const intValue=parseInt(value),source={type:"validator",name:validatorName};if(isNaN(intValue)){const msgArgs=["mustBeAnInteger"];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source})}else if(max&&intValue>parseInt(`${max}`)){const msgArgs=["error-number-out-of-range-too-big",`${max}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source})}else if(min&&intValue<parseInt(`${min}`)){const msgArgs=["error-number-out-of-range-too-small",`${min}`];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source})}else;}validator_x:{const validatorName="options",validator=validators[validatorName];if(void 0===validator)break validator_x;if(""===value)break validator_x;if(validator.options.indexOf(value)>=0)break validator_x;const msgArgs=[(0,id.id)("notAValidOption")];errors.push({errorMessage:(0,jsx_runtime.jsx)(react.Fragment,{children:msg(...msgArgs)},`${attributeName}-${errors.length}`),errorMessageStr:msgStr(...msgArgs),fieldIndex:void 0,source:{type:"validator",name:validatorName}})}return errors}));return{getErrors}}({kcContext,i18n}),initialState=(0,react.useMemo)((()=>{var _a,_b;const attributes=(()=>{var _a;if(!("profile"in kcContext)||!("attributesByName"in kcContext.profile)||0===Object.keys(kcContext.profile.attributesByName).length){if("register"in kcContext&&kcContext.register instanceof Object&&"formData"in kcContext.register)return["firstName","lastName","email","username"].filter((name=>"username"!==name||!kcContext.realm.registrationEmailAsUsername)).map((name=>{var _a;return(0,id.id)({name,displayName:(0,id.id)(`\${${name}}`),required:!0,value:null!==(_a=kcContext.register.formData[name])&&void 0!==_a?_a:"",html5DataAnnotations:{},readOnly:!1,validators:{},annotations:{},autocomplete:(()=>{switch(name){case"email":return"email";case"username":return"username";default:return}})()})}));if("user"in kcContext&&kcContext.user instanceof Object)return["username","email","firstName","lastName"].filter((name=>"username"!==name||kcContext.user.editUsernameAllowed)).map((name=>{var _a;return(0,id.id)({name,displayName:(0,id.id)(`\${${name}}`),required:!0,value:null!==(_a=kcContext.user[name])&&void 0!==_a?_a:"",html5DataAnnotations:{},readOnly:!1,validators:{},annotations:{},autocomplete:(()=>{switch(name){case"email":return"email";case"username":return"username";default:return}})()})}));if("email"in kcContext&&kcContext.email instanceof Object)return[(0,id.id)({name:"email",displayName:(0,id.id)("${email}"),required:!0,value:null!==(_a=kcContext.email.value)&&void 0!==_a?_a:"",html5DataAnnotations:{},readOnly:!1,validators:{},annotations:{},autocomplete:"email"})];(0,assert.assert)(!1,"Unable to mock user profile from the current kcContext")}return Object.values(kcContext.profile.attributesByName).map(structuredCloneButFunctions.v)})();attributes.forEach((attribute=>{var _a,_b,_c;patch_legacy_group:{if("string"!=typeof attribute.group)break patch_legacy_group;const{group,groupDisplayHeader,groupDisplayDescription,groupAnnotations}=attribute;delete attribute.group,delete attribute.groupDisplayHeader,delete attribute.groupDisplayDescription,delete attribute.groupAnnotations,""!==group&&(attribute.group={name:group,displayHeader:groupDisplayHeader,displayDescription:groupDisplayDescription,annotations:groupAnnotations,html5DataAnnotations:{}})}void 0!==attribute.validators.options&&void 0===attribute.annotations.inputType&&(attribute.annotations.inputType="select"),getIsMultivaluedSingleField({attribute})&&(attribute.multivalued=!0),attribute.multivalued?(null!==(_a=attribute.values)&&void 0!==_a||(attribute.values=void 0!==attribute.value?[attribute.value]:[]),delete attribute.value):(null!==(_b=attribute.value)&&void 0!==_b||(attribute.value=null===(_c=attribute.values)||void 0===_c?void 0:_c[0]),delete attribute.values)})),kcContext.passwordRequired&&attributes.forEach(((attribute,i)=>{attribute.name===(kcContext.realm.registrationEmailAsUsername?"email":"username")&&attributes.splice(i+1,0,{name:"password",displayName:(0,id.id)("${password}"),required:!0,readOnly:!1,validators:{},annotations:{},autocomplete:"new-password",html5DataAnnotations:{}},{name:"password-confirm",displayName:(0,id.id)("${passwordConfirm}"),required:!0,readOnly:!1,validators:{},annotations:{},html5DataAnnotations:{},autocomplete:"new-password"})}));const initialFormFieldState=[];for(const attribute of attributes){handle_multi_valued_attribute:{if(!attribute.multivalued)break handle_multi_valued_attribute;const values=(null===(_a=attribute.values)||void 0===_a?void 0:_a.length)?attribute.values:[""];apply_validator_min_range:{if(getIsMultivaluedSingleField({attribute}))break apply_validator_min_range;const validator=attribute.validators.multivalued;if(void 0===validator)break apply_validator_min_range;const{min:minStr}=validator;if(!minStr)break apply_validator_min_range;const min=parseInt(`${minStr}`);for(let index=values.length;index<min;index++)values.push("")}initialFormFieldState.push({attribute,valueOrValues:values});continue}initialFormFieldState.push({attribute,valueOrValues:null!==(_b=attribute.value)&&void 0!==_b?_b:""})}return{formFieldStates:initialFormFieldState.map((({attribute,valueOrValues})=>({attribute,errors:getErrors({attributeName:attribute.name,formFieldStates:initialFormFieldState}),hasLostFocusAtLeastOnce:valueOrValues instanceof Array&&!getIsMultivaluedSingleField({attribute})&&valueOrValues.map((()=>!1)),valueOrValues})))}}),[]),[state,dispatchFormAction]=(0,react.useReducer)((function reducer(state,formAction){const formFieldState=state.formFieldStates.find((({attribute})=>attribute.name===formAction.name));return(0,assert.assert)(void 0!==formFieldState),(()=>{var _a;switch(formAction.action){case"update":formFieldState.valueOrValues=formAction.valueOrValues;{const{attribute}=formFieldState,{kcNumberFormat}=null!==(_a=attribute.html5DataAnnotations)&&void 0!==_a?_a:{};kcNumberFormat&&(formFieldState.valueOrValues instanceof Array?formFieldState.valueOrValues=formFieldState.valueOrValues.map((value=>formatNumber(value,kcNumberFormat))):formFieldState.valueOrValues=formatNumber(formFieldState.valueOrValues,kcNumberFormat))}formFieldState.errors=getErrors({attributeName:formAction.name,formFieldStates:state.formFieldStates});{const{displayErrorsImmediately=!1}=formAction;if(displayErrorsImmediately)for(const fieldIndex of formAction.valueOrValues instanceof Array?formAction.valueOrValues.map(((...[,index])=>index)):[void 0])state=reducer(state,{action:"focus lost",name:formAction.name,fieldIndex})}return doMakeUserConfirmPassword||"password"===formAction.name&&(state=reducer(state,{action:"update",name:"password-confirm",valueOrValues:formAction.valueOrValues,displayErrorsImmediately:formAction.displayErrorsImmediately})),void(doMakeUserConfirmPassword&&"password"===formAction.name&&(state=reducer(state,{action:"update",name:"password-confirm",valueOrValues:(()=>{const formFieldState=state.formFieldStates.find((({attribute})=>"password-confirm"===attribute.name));return(0,assert.assert)(void 0!==formFieldState),formFieldState.valueOrValues})(),displayErrorsImmediately:formAction.displayErrorsImmediately})));case"focus lost":if(formFieldState.hasLostFocusAtLeastOnce instanceof Array){const{fieldIndex}=formAction;return(0,assert.assert)(void 0!==fieldIndex),void(formFieldState.hasLostFocusAtLeastOnce[fieldIndex]=!0)}return void(formFieldState.hasLostFocusAtLeastOnce=!0)}(0,assert.assert)(!1)})(),Object.assign({},state)}),initialState),formState=(0,react.useMemo)((()=>({formFieldStates:state.formFieldStates.map((_a=>{var{errors,hasLostFocusAtLeastOnce:hasLostFocusAtLeastOnceOrArr,attribute}=_a,valueOrValuesWrap=__rest(_a,["errors","hasLostFocusAtLeastOnce","attribute"]);return Object.assign({displayableErrors:errors.filter((error=>{const hasLostFocusAtLeastOnce="boolean"==typeof hasLostFocusAtLeastOnceOrArr?hasLostFocusAtLeastOnceOrArr:void 0!==error.fieldIndex?hasLostFocusAtLeastOnceOrArr[error.fieldIndex]:hasLostFocusAtLeastOnceOrArr[hasLostFocusAtLeastOnceOrArr.length-1];switch(error.source.type){case"server":return!0;case"other":switch(error.source.rule){case"requiredField":case"passwordConfirmMatchesPassword":return hasLostFocusAtLeastOnce}(0,assert.assert)(!1);case"passwordPolicy":switch(error.source.name){case"length":case"digits":case"lowerCase":case"upperCase":case"specialChars":return hasLostFocusAtLeastOnce;case"notUsername":case"notEmail":return!0}(0,assert.assert)(!1);case"validator":switch(error.source.name){case"length":case"pattern":case"email":case"integer":case"multivalued":case"options":return hasLostFocusAtLeastOnce}(0,assert.assert)(!1)}})),attribute},valueOrValuesWrap)})),isFormSubmittable:state.formFieldStates.every((({errors})=>0===errors.length))})),[state]);return{formState,dispatchFormAction}}function getIsMultivaluedSingleField(params){var _a,_b;const{attribute}=params;return null!==(_b=null===(_a=attribute.annotations.inputType)||void 0===_a?void 0:_a.startsWith("multiselect"))&&void 0!==_b&&_b}function getButtonToDisplayForMultivaluedAttributeField(params){const{attribute,values,fieldIndex}=params;return{hasRemove:(()=>{if(1===values.length)return!1;const minCount=(()=>{const{multivalued}=attribute.validators;if(void 0===multivalued)return;const minStr=multivalued.min;return void 0!==minStr?parseInt(`${minStr}`):void 0})();return void 0===minCount||values.length!==minCount})(),hasAdd:(()=>{if(fieldIndex+1!==values.length)return!1;const maxCount=(()=>{const{multivalued}=attribute.validators;if(void 0===multivalued)return;const maxStr=multivalued.max;return void 0!==maxStr?parseInt(`${maxStr}`):void 0})();return void 0===maxCount||values.length!==maxCount})()}}(0,assert.assert)(),(0,assert.assert)()},"./node_modules/keycloakify/tools/Array.prototype.every.js":()=>{Array.prototype.every||(Array.prototype.every=function(callbackfn,thisArg){var T,k;if(null==this)throw new TypeError("this is null or not defined");var O=Object(this),len=O.length>>>0;if("function"!=typeof callbackfn&&"[object Function]"!==Object.prototype.toString.call(callbackfn))throw new TypeError;for(arguments.length>1&&(T=thisArg),k=0;k<len;){var kValue;if(k in O)if(kValue=O[k],!(T?callbackfn.call(T,kValue,k,O):callbackfn(kValue,k,O)))return!1;k++}return!0})}}]);